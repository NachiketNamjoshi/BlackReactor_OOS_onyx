#!/system/bin/sh

############################
# Custom Kernel Settings

# Define Basic Paths:

REACTOR_S_DATA="/data/BlackReactor"
REACTOR__S_LOGFILE="$REACTOR_S_DATA/initialization.log"

# block devices
SYSTEM_DEVICE="/dev/block/platform/msm_sdcc.1/by-name/system"
CACHE_DEVICE="/dev/block/platform/msm_sdcc.1/by-name/cache"
DATA_DEVICE="/dev/block/platform/msm_sdcc.1/by-name/userdata"

# useful vars
DIR_TRUE=0

busybox mount -o remount,rw /system
busybox mount -o remount,rw /data

if [ ! -d $REACTOR_S_DATA ]; then
	echo "Creating Directory..."
	busybox mkdir -p $REACTOR_S_DATA
fi

# maintain log file history
	rm $REACTOR__S_LOGFILE.3
	mv $REACTOR__S_LOGFILE.2 $REACTOR__S_LOGFILE.3
	mv $REACTOR__S_LOGFILE.1 $REACTOR__S_LOGFILE.2
	mv $REACTOR__S_LOGFILE $REACTOR__S_LOGFILE.1

# Initialize the log file (chmod to make it readable also via /sdcard link)
	echo $(date) BlackReactor-Kernel initialization started > $REACTOR__S_LOGFILE
	busybox chmod 777 $REACTOR__S_LOGFILE
	busybox cat /proc/version >> $REACTOR__S_LOGFILE
	echo "=========================" >> $REACTOR__S_LOGFILE
	busybox grep ro.build.version /system/build.prop >> $REACTOR__S_LOGFILE
echo "=========================" >> $REACTOR__S_LOGFILE
echo "$(date) Tweaking interactive cpufreq gov" >> $REACTOR__S_LOGFILE
#############
echo "20000" > /sys/devices/system/cpu/cpufreq/interactive/timer_rate
echo "40000" > /sys/devices/system/cpu/cpufreq/interactive/min_sample_time
echo "760000" > /sys/devices/system/cpu/cpufreq/interactive/midrange_freq
echo "1300000" > /sys/devices/system/cpu/cpufreq/interactive/max_normal_freq
echo "1900000" > /sys/devices/system/cpu/cpufreq/interactive/max_boost
echo "65" > /sys/devices/system/cpu/cpufreq/interactive/midrange_go_maxspeed_load
echo "85" > /sys/devices/system/cpu/cpufreq/interactive/go_maxspeed_load
#############
echo "\n=========================\n" >> $REACTOR__S_LOGFILE
echo "$(date) Tweaking Performance 1" >> $REACTOR__S_LOGFILE
echo "0" > /proc/sys/vm/swappiness;

echo "3" > /proc/sys/vm/page-cluster;

echo "10" > /proc/sys/vm/vfs_cache_pressure; 

echo "2000" > /proc/sys/vm/dirty_writeback_centisecs;

echo "1000" > /proc/sys/vm/dirty_expire_centisecs; 

echo "0" > /proc/sys/vm/laptop_mode; 
echo "90" > /proc/sys/vm/dirty_ratio; 
echo "85" > /proc/sys/vm/dirty_background_ratio;  

echo "0" > /proc/sys/vm/oom_kill_allocating_task;  
echo "8" > /proc/sys/vm/page-cluster; 
echo "4096" > /proc/sys/vm/vm.min_free_kbytes; 
echo "10" > /proc/sys/fs/lease-break-time;
echo "0" > /proc/sys/vm/panic_on_oom; 
echo "64000" > /proc/sys/kernel/msgmni;
echo "64000" > /proc/sys/kernel/msgmax;
echo "10" > /proc/sys/fs/lease-break-time;
#############
echo "\n=========================\n" >> $REACTOR__S_LOGFILE
echo "$(date) Checking System Labels" >> $REACTOR__S_LOGFILE
# Bail out early if not on a SELinux build
getprop ro.build.selinux | grep -q 1 || exit
if [ ! -f /file_contexts ]; then
  exit
fi

LABELDATA=0
LABELSYS=0
LABELDALVIKCACHE=0

# Test /data
ls -Zd /data/system | grep -q unlabeled
if [ $? -eq 0 ]; then
 echo "userdata is unlabeled, fixing..." >> $REACTOR__S_LOGFILE
  LABELDATA=1
fi

# Recheck other files under /data
ls -Z /data/misc/wifi/wpa_supplicant.conf | grep -q "wifi_"
if [ $? -eq 1 ]; then
 echo "data is unlabeled, fixing..." >> $REACTOR__S_LOGFILE
  LABELDATA=1
fi

ls -Z /system/bin/surfaceflinger | grep -q unlabeled
if [ $? -eq 0 ]; then
 echo "system is unlabeled, fixing... (You really should update your recovery)" >> $REACTOR__S_LOGFILE
  LABELSYS=1
fi

ls -Z /system/priv-app/GoogleServicesFramework.apk | grep -q unlabeled
if [ $LABELSYS = "0" -a $? -eq 0 ]; then
 echo "Found unlabeled Google framework, fixing..." >> $REACTOR__S_LOGFILE
  LABELSYS=1
fi

ls -Zd /data/dalvik-cache | grep -q unlabeled
if [ $? -eq 0 ]; then
 echo "dalvik-cache is unlabeled, fixing..." >> $REACTOR__S_LOGFILE
  LABELDALVIKCACHE=1
fi

ls -Zd /cache/dalvik-cache | grep -q unlabeled
if [ $? -eq 0 ]; then
 echo "dalvik-cache is unlabeled, fixing..." >> $REACTOR__S_LOGFILE
  LABELDALVIKCACHE=1
fi

if [ $LABELSYS = "1" ]; then
  busybox mount -o remount,rw /system
 echo "/system relabel starting..." >> $REACTOR__S_LOGFILE
  restorecon -R /system
 echo "/system relabel complete" >> $REACTOR__S_LOGFILE
  busybox mount -o remount,ro /system
fi

if [ $LABELDATA = "1" ]; then
 echo "/data relabel starting..." >> $REACTOR__S_LOGFILE
  restorecon -R /data
 echo "/data relabel complete" >> $REACTOR__S_LOGFILE
 echo "/cache relabel starting..." >> $REACTOR__S_LOGFILE
  restorecon -R /cache
 echo "/cache relabel complete" >> $REACTOR__S_LOGFILE
fi

if [ $LABELDALVIKCACHE = "1" ]; then
 echo "dalvik-cache relabel starting..." >> $REACTOR__S_LOGFILE
  restorecon -R /data/dalvik-cache
  restorecon -R /cache/dalvik-cache
 echo "dalvik-cache relabel complete" >> $REACTOR__S_LOGFILE
fi
echo "Checking Done." >> $REACTOR__S_LOGFILE
#############
echo "\n=========================\n" >> $REACTOR__S_LOGFILE
echo "$(date) End Log" >> $REACTOR__S_LOGFILE
echo "\n=========================\n" >> $REACTOR__S_LOGFILE